// ===================================================================
// CAMI3D BACKEND SERVER - SERVIDOR PRINCIPAL DA API
// ===================================================================
// Este arquivo configura e inicializa o servidor Express da aplica√ß√£o Cami3D
// Inclui configura√ß√µes de seguran√ßa, CORS, rate limiting, rotas e documenta√ß√£o

const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
const rateLimit = require('express-rate-limit');
const path = require('path');
require('dotenv').config();

// ===================================================================
// IMPORTA√á√ïES - CONFIGURA√á√ïES E DEPEND√äNCIAS
// ===================================================================

// Conex√£o com banco de dados MongoDB
const connectDB = require('./src/config/database');

// Rotas da API organizadas por funcionalidade
const authRoutes = require('./src/routes/auth');        // Autentica√ß√£o e autoriza√ß√£o
const tshirtRoutes = require('./src/routes/tshirt');    // Gerenciamento de designs de camisetas
const uploadRoutes = require('./src/routes/upload');    // Upload e gerenciamento de imagens
const userRoutes = require('./src/routes/user');        // Gerenciamento de usu√°rios

// Middlewares personalizados e configura√ß√µes
const errorHandler = require('./src/middleware/errorHandler');           // Tratamento global de erros
const { initStorage } = require('./src/middleware/initStorage');         // Inicializa√ß√£o do sistema de arquivos
const { swaggerSpec, swaggerUi, swaggerUiOptions } = require('./src/config/swagger'); // Documenta√ß√£o da API

// ===================================================================
// CONFIGURA√á√ÉO INICIAL DO SERVIDOR
// ===================================================================

const app = express();
const PORT = process.env.PORT || 8080;

// ===================================================================
// MIDDLEWARES DE SEGURAN√áA
// ===================================================================

// Helmet: Adiciona cabe√ßalhos de seguran√ßa HTTP para proteger contra vulnerabilidades comuns
// - X-Content-Type-Options: nosniff (previne MIME type sniffing)
// - X-Frame-Options: DENY (previne clickjacking)
// - X-XSS-Protection: 1; mode=block (prote√ß√£o XSS)
// - Strict-Transport-Security: for√ßa HTTPS em produ√ß√£o
app.use(helmet());

// ===================================================================
// CONFIGURA√á√ÉO DE RATE LIMITING
// ===================================================================

// Limita o n√∫mero de requisi√ß√µes por IP para prevenir ataques de for√ßa bruta e DDoS
const limiter = rateLimit({
  windowMs: (process.env.RATE_LIMIT_WINDOW || 15) * 60 * 1000, // Janela de tempo: 15 minutos
  max: process.env.RATE_LIMIT_MAX_REQUESTS || 100,             // M√°ximo de 100 requisi√ß√µes por IP na janela
  message: {
    error: 'Muitas requisi√ß√µes deste IP. Tente novamente mais tarde.'
  },
  standardHeaders: true,  // Retorna informa√ß√µes do rate limit nos headers `RateLimit-*`
  legacyHeaders: false,   // Desabilita headers `X-RateLimit-*`
});
app.use(limiter);

// ===================================================================
// CONFIGURA√á√ÉO CORS (Cross-Origin Resource Sharing)
// ===================================================================

// Configura√ß√£o avan√ßada de CORS para permitir requisi√ß√µes do frontend
// Controla quais dom√≠nios podem acessar a API baseado no ambiente (dev/prod)
const corsOptions = {
  origin: function (origin, callback) {
    // Permite requisi√ß√µes sem origin (aplica√ß√µes mobile, ferramentas de API como Postman)
    if (!origin) return callback(null, true);
    
    // AMBIENTE DE DESENVOLVIMENTO: Permite origins localhost
    if (process.env.NODE_ENV === 'development') {
      const allowedOrigins = [
        'http://localhost:3000',    // React padr√£o
        'http://localhost:5173',    // Vite padr√£o
        'http://localhost:8080',    // Servidor local alternativo
        'http://127.0.0.1:3000',   // IP local - React
        'http://127.0.0.1:5173',   // IP local - Vite
        'http://127.0.0.1:8080'    // IP local - alternativo
      ];
      if (allowedOrigins.includes(origin)) {
        return callback(null, true);
      }
    }
    
    // AMBIENTE DE PRODU√á√ÉO: Permite apenas dom√≠nios espec√≠ficos e seguros
    const allowedOrigins = [
      process.env.FRONTEND_URL,              // URL do frontend definida no .env
      process.env.PRODUCTION_URL,            // URL de produ√ß√£o do backend
      process.env.PRODUCTION_FRONTEND_URL,   // URL de produ√ß√£o do frontend
      'http://capmi3d.discloud.app',         // Backend DisCloud (HTTP)
      'https://capmi3d.discloud.app',        // Backend DisCloud (HTTPS)
      'http://cami3d.discloud.app',          // Frontend DisCloud (HTTP)
      'https://cami3d.discloud.app',         // Frontend DisCloud (HTTPS)
    ].filter(Boolean); // Remove valores undefined/null
    
    if (allowedOrigins.includes(origin)) {
      return callback(null, true);
    }
    
    // Para ferramentas de teste de API e chamadas diretas, permite quando n√£o h√° origin
    callback(null, true);
  },
  credentials: true,                        // Permite envio de cookies e headers de autentica√ß√£o
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], // M√©todos HTTP permitidos
  allowedHeaders: [                         // Headers permitidos nas requisi√ß√µes
    'Content-Type',     // Tipo do conte√∫do (application/json, etc.)
    'Authorization',    // Token JWT para autentica√ß√£o
    'X-Requested-With', // Identifica requisi√ß√µes AJAX
    'Accept',          // Tipos de resposta aceitos
    'Origin'           // Origin da requisi√ß√£o
  ],
  exposedHeaders: ['Content-Length', 'X-Request-ID'], // Headers expostos para o cliente
  maxAge: 86400 // Cache do preflight por 24 horas (evita requisi√ß√µes OPTIONS desnecess√°rias)
};

app.use(cors(corsOptions));

// Gerencia requisi√ß√µes OPTIONS preflight para todas as rotas
// Necess√°rio para requisi√ß√µes CORS complexas (com headers customizados)
app.options('*', cors(corsOptions));

// ===================================================================
// MIDDLEWARE DE DEBUG CORS (APENAS EM DESENVOLVIMENTO)
// ===================================================================

// Log detalhado de requisi√ß√µes CORS para debug durante desenvolvimento
if (process.env.NODE_ENV === 'development') {
  app.use((req, res, next) => {
    console.log(`üåê CORS Debug - Origin: ${req.get('origin')}, M√©todo: ${req.method}, Rota: ${req.path}`);
    next();
  });
}

// ===================================================================
// MIDDLEWARES DE APLICA√á√ÉO
// ===================================================================

// Sistema de logging de requisi√ß√µes HTTP
// - 'combined': formato completo para produ√ß√£o (inclui user-agent, referer, etc.)
// - 'dev': formato simplificado e colorido para desenvolvimento
app.use(morgan(process.env.NODE_ENV === 'production' ? 'combined' : 'dev'));

// Parsing do corpo das requisi√ß√µes HTTP
app.use(express.json({ limit: '10mb' }));                        // Parse JSON at√© 10MB
app.use(express.urlencoded({ extended: true, limit: '10mb' }));  // Parse form data at√© 10MB

// ===================================================================
// ARQUIVOS EST√ÅTICOS
// ===================================================================

// Serve imagens e arquivos uploadados na rota /uploads
// Exemplo: /uploads/image123.jpg aponta para ./uploads/image123.jpg
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// ===================================================================
// ENDPOINTS DE DOCUMENTA√á√ÉO
// ===================================================================

// Endpoint para JSON da especifica√ß√£o Swagger/OpenAPI
// Usado por ferramentas que consomem a documenta√ß√£o programaticamente
app.get('/api-docs.json', (req, res) => {
  res.setHeader('Content-Type', 'application/json');
  res.send(swaggerSpec);
});

/**
 * @swagger
 * /health:
 *   get:
 *     summary: Verifica√ß√£o de Sa√∫de da API
 *     description: |
 *       Endpoint para monitoramento da sa√∫de da API.
 *       Retorna informa√ß√µes sobre o status do servidor, timestamp e vers√£o.
 *       Usado por sistemas de monitoramento e load balancers.
 *     tags: [Health]
 *     responses:
 *       200:
 *         description: API funcionando normalmente
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   example: OK
 *                   description: Status atual da API
 *                 message:
 *                   type: string
 *                   example: Cami3D API is running
 *                   description: Mensagem descritiva do status
 *                 timestamp:
 *                   type: string
 *                   format: date-time
 *                   description: Timestamp atual do servidor
 *                 version:
 *                   type: string
 *                   example: 1.0.0
 *                   description: Vers√£o atual da API
 */
// Endpoint de verifica√ß√£o de sa√∫de da API
// Usado para monitoramento, health checks de containers e load balancers
app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'OK',
    message: 'Cami3D API est√° funcionando',
    timestamp: new Date().toISOString(),
    version: '1.0.0'
  });
});

// ===================================================================
// ROTAS DA API
// ===================================================================

// Rotas organizadas por funcionalidade com prefixo /api
app.use('/api/auth', authRoutes);      // Autentica√ß√£o: login, registro, recupera√ß√£o de senha
app.use('/api/tshirt', tshirtRoutes);  // Designs de camisetas: CRUD, galeria, compartilhamento
app.use('/api/upload', uploadRoutes);  // Upload de imagens: envio, listagem, exclus√£o
app.use('/api/user', userRoutes);      // Usu√°rios: perfil, configura√ß√µes, estat√≠sticas

// ===================================================================
// DOCUMENTA√á√ÉO SWAGGER UI
// ===================================================================

// Interface web da documenta√ß√£o da API na rota raiz
// Acess√≠vel em: http://localhost:8080/ ou https://capmi3d.discloud.app/
app.use('/', swaggerUi.serve, swaggerUi.setup(swaggerSpec, swaggerUiOptions));

// ===================================================================
// TRATAMENTO DE ERROS E ROTAS INEXISTENTES
// ===================================================================

// Handler para rotas n√£o encontradas (404)
// Captura todas as requisi√ß√µes que n√£o correspondem √†s rotas definidas
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Rota n√£o encontrada',
    message: `O endpoint ${req.originalUrl} n√£o existe`,
    availableEndpoints: [
      '/health',
      '/api/auth/*',
      '/api/tshirt/*', 
      '/api/upload/*',
      '/api/user/*',
      '/api-docs.json',
      '/ (documenta√ß√£o)'
    ]
  });
});

// Middleware global de tratamento de erros (deve ser o √∫ltimo)
// Captura e processa todos os erros n√£o tratados da aplica√ß√£o
app.use(errorHandler);

// ===================================================================
// INICIALIZA√á√ÉO DO SERVIDOR
// ===================================================================

/**
 * Fun√ß√£o ass√≠ncrona para inicializar o servidor de forma sequencial
 * 1. Conecta ao banco de dados MongoDB
 * 2. Inicializa o sistema de armazenamento de arquivos
 * 3. Inicia o servidor Express na porta especificada
 * 4. Exibe informa√ß√µes de status e URLs importantes
 */
const startServer = async () => {
  try {
    // Etapa 1: Estabelece conex√£o com MongoDB Atlas
    console.log('üîå Conectando ao banco de dados...');
    await connectDB();

    // Etapa 2: Inicializa sistema de arquivos (cria pastas necess√°rias)
    console.log('üìÅ Inicializando sistema de armazenamento...');
    await initStorage();

    // Etapa 3: Inicia o servidor HTTP
    app.listen(PORT, () => {
      console.log('\nüéâ ===== CAMI3D BACKEND INICIADO COM SUCESSO =====');
      console.log(`üöÄ Servidor rodando na porta: ${PORT}`);
      console.log(`üìÅ Ambiente: ${process.env.NODE_ENV || 'development'}`);
      console.log(`üóÑÔ∏è  Banco de dados: MongoDB Atlas (Conectado)`);
      console.log('\nüìç URLs importantes:');
      console.log(`   Health Check: http://localhost:${PORT}/health`);
      console.log(`   Documenta√ß√£o: http://localhost:${PORT}/`);
      console.log(`   API Base: http://localhost:${PORT}/api`);
      console.log('\nüåê URLs de produ√ß√£o:');
      console.log(`   Backend: ${process.env.PRODUCTION_URL || 'N√£o configurado'}`);
      console.log(`   Frontend: ${process.env.PRODUCTION_FRONTEND_URL || 'N√£o configurado'}`);
      console.log('\nÔøΩ Recursos dispon√≠veis:');
      console.log('   ‚úÖ Autentica√ß√£o JWT');
      console.log('   ‚úÖ Upload de imagens');
      console.log('   ‚úÖ Designs de camisetas 3D');
      console.log('   ‚úÖ Galeria p√∫blica');
      console.log('   ‚úÖ Rate limiting');
      console.log('   ‚úÖ CORS configurado');
      console.log('   ‚úÖ Documenta√ß√£o Swagger');
      console.log('================================================\n');
    });
    
  } catch (error) {
    console.error('‚ùå ERRO CR√çTICO: Falha ao iniciar servidor:', error);
    console.error('\nüîç Poss√≠veis causas:');
    console.error('   - Problema de conex√£o com MongoDB');
    console.error('   - Porta j√° em uso');
    console.error('   - Vari√°veis de ambiente incorretas');
    console.error('   - Permiss√µes de arquivo insuficientes');
    console.error('\nüí° Verifique o arquivo .env e tente novamente.\n');
    process.exit(1);
  }
};

// Inicia o servidor
startServer();

module.exports = app;
